(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{489:function(t,a,s){"use strict";s.r(a);var n=s(44),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"kotlin-泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kotlin-泛型"}},[t._v("#")]),t._v(" kotlin-泛型")]),t._v(" "),s("br"),t._v(" "),s("h3",{attrs:{id:"什么是泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是泛型"}},[t._v("#")]),t._v(" 什么是泛型?")]),t._v(" "),s("br"),t._v(" "),s("ul",[s("li",[t._v("泛化的类型或者说类型的抽象")]),t._v(" "),s("li",[t._v("很多时候我们并不关心它是什么")]),t._v(" "),s("li",[t._v("而关心它能做什么,这就是泛型要解决的问题.")])]),t._v(" "),s("br"),t._v(" "),s("h3",{attrs:{id:"如何为函数声明泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何为函数声明泛型"}},[t._v("#")]),t._v(" 如何为函数声明泛型")]),t._v(" "),s("br"),t._v("\n- 为函数声明泛型,泛型要放在函数名之前.\n"),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("   　"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" T "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Comparable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("maxOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" T "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" b\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("br"),t._v(" "),s("h3",{attrs:{id:"如何为类声明泛型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何为类声明泛型"}},[t._v("#")]),t._v(" 如何为类声明泛型")]),t._v(" "),s("br"),t._v("\n- 为类声明泛型,泛型要放在类名之后\n"),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" showText"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" j"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" String "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        \t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"'),s("span",{pre:!0,attrs:{class:"token interpolation variable"}},[t._v("$i")]),t._v(","),s("span",{pre:!0,attrs:{class:"token interpolation variable"}},[t._v("$j")]),t._v('"')]),t._v("\n    \t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("br"),t._v(" "),s("h4",{attrs:{id:"泛型约束"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型约束"}},[t._v("#")]),t._v(" 泛型约束")]),t._v(" "),s("ul",[s("li",[t._v("< T : Comparable < T > >")]),t._v(" "),s("li",[t._v(":冒号之后指定的类型是上界,泛型T只能是Comparable < T >的子类.")]),t._v(" "),s("li",[t._v("若没有声明,默认的上界是Any? 在尖括号中只能指定一个上界.如果同一类型参数需要多个上界,我们需要一个单独的where子句")])]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("maxof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("T\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Comparable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Cloneable "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" b\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("hr"),t._v(" "),s("br"),t._v(" "),s("h4",{attrs:{id:"泛型的实现机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型的实现机制"}},[t._v("#")]),t._v(" 泛型的实现机制")]),t._v(" "),s("br"),t._v(" "),s("ul",[s("li",[t._v("何为真泛型(C#)\n"),s("ul",[s("li",[t._v("真泛型编译前变异后,泛型都存在")])])]),t._v(" "),s("li",[t._v("何为伪泛型(Java,Kotlin)\n"),s("ul",[s("li",[t._v("伪泛型只存在编译之前,编译之后就随风而去了")])])])]),t._v(" "),s("h4",{attrs:{id:"kotlin对于真泛型的部分实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#kotlin对于真泛型的部分实现"}},[t._v("#")]),t._v(" Kotlin对于真泛型的部分实现")]),t._v(" "),s("br"),t._v(" "),s("ul",[s("li",[t._v("使用 inline(内联)关键字标记方法")]),t._v(" "),s("li",[t._v("使用 Reifild(具体化)关键字标记泛型")])]),t._v(" "),s("blockquote",[s("p",[t._v("注意泛型具体化必须使用inline标记")])]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("   "),s("span",{pre:!0,attrs:{class:"token annotation builtin"}},[t._v("@Test")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("addition_isCorrect")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Generic"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("inline")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("reified")]),t._v(" T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Generic")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("java"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("输出结果")]),t._v(" "),s("blockquote",[s("p",[t._v("class java.lang.Integer")])]),t._v(" "),s("br"),t._v(" "),s("h3",{attrs:{id:"型变"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#型变"}},[t._v("#")]),t._v(" 型变")]),t._v(" "),s("br"),t._v(" "),s("br"),t._v(" "),s("h4",{attrs:{id:"协变-out"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#协变-out"}},[t._v("#")]),t._v(" 协变(out)")]),t._v(" "),s("br"),t._v(" "),s("ul",[s("li",[t._v("泛型参数为协变时,这个类型的继承关系与泛型参数的继承关系是一致的.")]),t._v(" "),s("li",[t._v("kotlin中的协变(out)相当于java中的通配符 《 ?extends E 》,表示接受 T 或者 T 的子类.")])]),t._v(" "),s("div",{staticClass:"language-kt extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kt"}},[s("code",[t._v("   \t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n         * 协变\n         * Number是Int的父类\n         * List<Number>是List<Int>的父类\n         */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("List"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Number"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" numlist"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("List"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Number"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" intList\n")])])]),s("br"),t._v(" "),s("h4",{attrs:{id:"逆变-in"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#逆变-in"}},[t._v("#")]),t._v(" 逆变(in)")]),t._v(" "),s("br"),t._v("\n* 泛型参数为逆变时,这个类型的继承关系与泛型参数的继承关系是相反的.\n* kotlin中的逆变(in)相当于java中的通配符《 ?super E 》,表示接受 T 或者 T 的超类.\n"),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n         * 逆变\n         * Comparable<Int>居然是Comparable<Any>的父类我没有瞎吧?\n         * 你没有瞎,可是为什么会这样呢?因为是逆变呀\n         * Int的超类是Any\n         */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" intComparable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Comparable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Int"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Comparable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Any"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("other"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Any"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n         * 我们看下实现,Comparable<in T> \n         * 逆变(in) :泛型类型与实参的继承关系相反\n         * 这就可以解释通了\n         */")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" Comparable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("operator")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("other"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Int\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("br"),t._v(" "),s("h4",{attrs:{id:"注意事项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#注意事项"}},[t._v("#")]),t._v(" 注意事项")]),t._v(" "),s("br"),t._v("\n* 协变点 \n\t* 一提到协变你就应该想到类型是只读的\n\t* 泛型参数:返回值类型\n"),s("div",{staticClass:"language- extra-class"},[s("pre",[s("code",[t._v(">  对于谁只读呢?\t对于泛型参数类型对应的变量时只读\n")])])]),s("ul",[s("li",[s("p",[t._v("逆变点")]),t._v(" "),s("ul",[s("li",[t._v("一提到逆变你就应该想到类型是只写的")]),t._v(" "),s("li",[t._v("泛型参数:入参类型")])]),t._v(" "),s("blockquote",[s("p",[t._v("对于谁只写呢?\t对于泛型参数类型对应的变量时只写")])])]),t._v(" "),s("li",[s("p",[t._v("不变点")]),t._v(" "),s("ul",[s("li",[t._v("T")]),t._v(" "),s("li",[t._v("类型是可读写的")])])]),t._v(" "),s("li",[s("p",[t._v("型变点违规")]),t._v(" "),s("ul",[s("li",[t._v("使用 @UnsafeVariance 标注,让编译器闭嘴.")])])])]),t._v(" "),s("br"),t._v(" "),s("h4",{attrs:{id:"星投影"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#星投影"}},[t._v("#")]),t._v(" 星投影")]),t._v(" "),s("br"),t._v("\n有时你对类型参数一无所知,但任然希望以安全的方式使用它.星投影就是你了.\n"),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[t._v("        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" list"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("List"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("listOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("注意需要泛型实参时不能使用星投影")]),t._v(" "),s("div",{staticClass:"language-kotlin extra-class"},[s("pre",{pre:!0,attrs:{class:"language-kotlin"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//这样用可以吗当然不可以!!!!")]),t._v("\n    hello"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fun")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hello")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);