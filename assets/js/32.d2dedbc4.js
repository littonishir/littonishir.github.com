(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{486:function(t,a,v){"use strict";v.r(a);var r=v(44),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"kotlin-java混合开发"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#kotlin-java混合开发"}},[t._v("#")]),t._v(" kotlin-Java混合开发")]),t._v(" "),v("br"),t._v(" "),v("h2",{attrs:{id:"基本互操作"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#基本互操作"}},[t._v("#")]),t._v(" 基本互操作")]),t._v(" "),v("br"),t._v(" "),v("h3",{attrs:{id:"属性读写"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#属性读写"}},[t._v("#")]),t._v(" 属性读写")]),t._v(" "),v("br"),t._v(" "),v("ul",[v("li",[v("p",[t._v("Kotlin 自动识别 Java Getter/Setter")])]),t._v(" "),v("li",[v("p",[t._v("Java 操作 Kotlin 属性通过 Getter/Setter")])])]),t._v(" "),v("br"),t._v(" "),v("h3",{attrs:{id:"空安全类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#空安全类型"}},[t._v("#")]),t._v(" 空安全类型")]),t._v(" "),v("br"),t._v(" "),v("ul",[v("li",[t._v("Kotlin空安全类型的原理")]),t._v(" "),v("li",[t._v("平台类型 Platfron Type")]),t._v(" "),v("li",[t._v("@Nullable 和 @NotNull")])]),t._v(" "),v("br"),t._v(" "),v("h3",{attrs:{id:"几类函数的调用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#几类函数的调用"}},[t._v("#")]),t._v(" 几类函数的调用")]),t._v(" "),v("br"),t._v(" "),v("ul",[v("li",[t._v("包级函数 : 静态方法")]),t._v(" "),v("li",[t._v("扩转方法 : 带 Receiver 的静态方法")]),t._v(" "),v("li",[t._v("运算符重载 : 带 Receiver 的对应名称的静态方法")])]),t._v(" "),v("br"),t._v(" "),v("h3",{attrs:{id:"常用注解的使用"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#常用注解的使用"}},[t._v("#")]),t._v(" 常用注解的使用")]),t._v(" "),v("br"),t._v(" "),v("ul",[v("li",[t._v("@JvmField : 将属性编译为 Java 变量")]),t._v(" "),v("li",[t._v("@JvmStatic : 讲对象的方法编译成 Java 的静态方法")]),t._v(" "),v("li",[t._v("@JvmOverloads : 默认参数生成重载方法")]),t._v(" "),v("li",[t._v("@file:JvmName : 指定 Kotlin 文件编译后的类名")])])])}),[],!1,null,null,null);a.default=e.exports}}]);